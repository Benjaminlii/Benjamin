<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:task="http://www.springframework.org/schema/task"
       xsi:schemaLocation="
             http://www.springframework.org/schema/beans
             http://www.springframework.org/schema/beans/spring-beans.xsd
             http://www.springframework.org/schema/context
             http://www.springframework.org/schema/context/spring-context.xsd
             http://www.springframework.org/schema/tx
             http://www.springframework.org/schema/tx/spring-tx.xsd
             http://www.springframework.org/schema/aop
             http://www.springframework.org/schema/aop/spring-aop.xsd">

    <!-- 加载系统配置文件 -->
    <context:property-placeholder location="classpath:config.properties" />

    <!-- 与上面的配置等价，下面的更容易理解 -->
<!--    <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">-->
<!--        <property name="locations"> &lt;!&ndash; PropertyPlaceholderConfigurer类中有个locations属性，接收的是一个数组，即我们可以在下面配好多个properties文件 &ndash;&gt;-->
<!--            <array>-->
<!--                <value>classpath:config.properties</value>-->
<!--            </array>-->
<!--        </property>-->
<!--    </bean>-->

    <!-- 导入sprint mvc配置 -->
    <import resource="applicationContext-mvc.xml"/>

    <!-- 导入mybatis相关配置 -->
    <import resource="applicationContext-mybatis.xml" />

    <!-- 导入redis相关配置 -->
    <import resource="applicationContext-redis.xml" />

    <!-- 导入mqtt相关配置 -->
    <import resource="applicationContext-mqtt.xml" />

    <!-- 扫描注解 -->
    <context:component-scan base-package="com.thoughtCoding.theMall.service" />

    <!-- 事务相关控制 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>
    <tx:annotation-driven transaction-manager="transactionManager"/>

    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <!-- 对业务层所有方法添加事务，除了以get、find、select开始的 -->
            <tx:method name="*" isolation="DEFAULT" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
            <!-- 查询操作没有必要开启事务，给只读事务添加一个属性read-only -->
            <tx:method name="get*" read-only="true"/>
            <tx:method name="find*" read-only="true"/>
            <tx:method name="select*" read-only="true"/>
            <tx:method name="query*" read-only="true"/>
        </tx:attributes>
    </tx:advice>
    <!-- Service层事务控制 -->
    <aop:config>
        <aop:pointcut id="pointcut" expression="execution(* com.thoughtCoding.theMall.service.*..*(..))"/>
        <aop:advisor pointcut-ref="pointcut" advice-ref="txAdvice"/>
    </aop:config>

</beans>